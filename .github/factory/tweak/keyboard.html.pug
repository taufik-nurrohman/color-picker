extends ../_index.pug

block state
  - const scripts = ['../index.min.js']
  - const styles = ['../index.min.css']
  - const title = 'Color Picker'

block style
  style
    | /* Fake focus state */
    | .color-picker--focus--a .color-picker__control--a div,
    | .color-picker--focus--h .color-picker__control--h div,
    | .color-picker--focus--s\/v .color-picker__control--s\/v div {
    |   outline: 2px solid rgba(0, 0, 255, .5);
    |   outline-offset: -2px;
    | }

block script
  script
    | const picker = new CP(document.querySelector('input'));
    |
    | picker.on('change', function (r, g, b, a) {
    |     let value = this.color(r, g, b, a);
    |     this.source.value = value;
    |     document.documentElement.style.background = value;
    | });
    |
    | function enableKeyboardControls(picker, step) {
    |     if (picker.canUseKeyboard) {
    |         return;
    |     }
    |     picker.canUseKeyboard = true;
    |     function toRGB(a) {
    |         let h = +a[0],
    |             s = +a[1],
    |             v = +a[2],
    |             r, g, b, i, f, p, q, t;
    |         i = Math.floor(h * 6);
    |         f = h * 6 - i;
    |         p = v * (1 - s);
    |         q = v * (1 - f * s);
    |         t = v * (1 - (1 - f) * s);
    |         i = i || 0;
    |         q = q || 0;
    |         t = t || 0;
    |         switch (i % 6) {
    |             case 0:
    |                 r = v, g = t, b = p;
    |                 break;
    |             case 1:
    |                 r = q, g = v, b = p;
    |                 break;
    |             case 2:
    |                 r = p, g = v, b = t;
    |                 break;
    |             case 3:
    |                 r = p, g = q, b = v;
    |                 break;
    |             case 4:
    |                 r = t, g = p, b = v;
    |                 break;
    |             case 5:
    |                 r = v, g = p, b = q;
    |                 break;
    |         }
    |         return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
    |     }
    |     let ah, ay, hh, hy, sw, sx, vh, vy,
    |         ch, cw,
    |         // 0: sv
    |         // 1: h
    |         // 2: a
    |         tabIndex = 0;
    |     let classNameM = picker.state.class + '--',
    |         source = picker.source,
    |         self = picker.self,
    |         controls = self.firstChild.children,
    |         a = controls[2],
    |         aCursor = a.children[2],
    |         aPallete = a.children[0],
    |         h = controls[1],
    |         hCursor = h.children[1],
    |         sv = controls[0],
    |         svCursor = sv.children[3],
    |         svPallete = sv.children[0],
    |         hFocus = () => {
    |             tabIndex = 1;
    |             hh = h.offsetHeight;
    |             hy = parseFloat(hCursor.style.top) + (ch = hCursor.offsetHeight / 2);
    |             self.classList.add(classNameM + 'focus--h');
    |             self.classList.remove(classNameM + 'focus--a');
    |             self.classList.remove(classNameM + 'focus--s/v');
    |         },
    |         svFocus = () => {
    |             tabIndex = 0;
    |             sw = sv.offsetWidth;
    |             sx = parseFloat(svCursor.style.right) + (cw = svCursor.offsetWidth / 2);
    |             vh = sv.offsetHeight;
    |             vy = parseFloat(svCursor.style.top) + (ch = svCursor.offsetHeight / 2);
    |             self.classList.add(classNameM + 'focus--s/v');
    |             self.classList.remove(classNameM + 'focus--a');
    |             self.classList.remove(classNameM + 'focus--h');
    |         },
    |         aFocus = () => {
    |             tabIndex = 2;
    |             ah = a.offsetHeight;
    |             ay = parseFloat(aCursor.style.top) + (ch = aCursor.offsetHeight / 2);
    |             self.classList.add(classNameM + 'focus--a');
    |             self.classList.remove(classNameM + 'focus--h');
    |             self.classList.remove(classNameM + 'focus--s/v');
    |         };
    |     picker.on('enter', () => {
    |         ['touchstart', 'mousedown'].forEach(e => {
    |             a.addEventListener(e, aFocus, false);
    |             h.addEventListener(e, hFocus, false);
    |             sv.addEventListener(e, svFocus, false);
    |         });
    |         aFocus(), hFocus(), svFocus(); // Focus to `sv` control by default!
    |     });
    |     picker.on('exit', () => {
    |         ['touchstart', 'mousedown'].forEach(e => {
    |             a.removeEventListener(e, aFocus);
    |             h.removeEventListener(e, hFocus);
    |             sv.removeEventListener(e, svFocus);
    |         });
    |     });
    |     source.addEventListener('focus', function () {
    |         picker.enter(); // Show!
    |     });
    |     source.addEventListener('keydown', function (e) {
    |         let key = e.key,
    |             stop = false,
    |             tabs = controls.length - 1,
    |             update = false,
    |             visible = picker.visible;
    |         // Press `Escape` to close the color picker!
    |         if ('Escape' === key && visible) {
    |             picker.exit();
    |             source.focus();
    |             source.select();
    |             stop = true;
    |         // Press `Tab` or `Shift+Tab` to cycle between color picker control(s)!
    |         } else if ('Tab' === key && visible) {
    |             // Exclude hidden control(s)
    |             for (let i = 0, j = tabs + 1; i < j; ++i) {
    |                 if (controls[i] && controls[i].offsetHeight <= 0 && controls[i].offsetWidth <= 0) {
    |                     --tabs;
    |                 }
    |             }
    |             if (e.shiftKey) {
    |                 tabIndex = tabIndex < 1 ? tabs : tabIndex - 1;
    |             } else {
    |                 tabIndex = tabIndex > tabs - 1 ? 0 : tabIndex + 1;
    |             }
    |             if (0 === tabIndex) {
    |                 svFocus();
    |             } else if (1 === tabIndex) {
    |                 hFocus();
    |             } else if (2 === tabIndex) {
    |                 aFocus();
    |             }
    |             stop = true;
    |         } else if ('ArrowDown' === key && !visible) {
    |             picker.enter();
    |             stop = true;
    |         }
    |         // Saturation/Value
    |         if (0 === tabIndex && visible) {
    |             if ('ArrowDown' === key) {
    |                 vy += step;
    |                 vy = vy > vh ? vh : vy;
    |                 svCursor.style.top = (vy - ch) + 'px';
    |                 stop = update = true;
    |             } else if ('ArrowLeft' === key) {
    |                 sx += step;
    |                 sx = sx > sw ? sw : sx;
    |                 svCursor.style.right = (sx - cw) + 'px';
    |                 stop = update = true;
    |             } else if ('ArrowRight' === key) {
    |                 sx -= step;
    |                 sx = sx < 0 ? 0 : sx;
    |                 svCursor.style.right = (sx - cw) + 'px';
    |                 stop = update = true;
    |             } else if ('ArrowUp' === key) {
    |                 vy -= step;
    |                 vy = vy < 0 ? 0 : vy;
    |                 svCursor.style.top = (vy - ch) + 'px';
    |                 stop = update = true;
    |             }
    |         // Hue
    |         } else if (1 === tabIndex && visible) {
    |             if ('ArrowDown' === key) {
    |                 hy += step;
    |                 hy = hy > hh ? hh : hy;
    |                 hCursor.style.top = (hy - ch) + 'px';
    |                 stop = update = true;
    |             } else if ('ArrowUp' === key) {
    |                 hy -= step;
    |                 hy = hy < 0 ? 0 : hy;
    |                 hCursor.style.top = (hy - ch) + 'px';
    |                 stop = update = true;
    |             }
    |         // Alpha
    |         } else if (2 === tabIndex && visible) {
    |             if ('ArrowDown' === key) {
    |                 ay += step;
    |                 ay = ay > ah ? ah : ay;
    |                 aCursor.style.top = (ay - ch) + 'px';
    |                 stop = update = true;
    |             } else if ('ArrowUp' === key) {
    |                 ay -= step;
    |                 ay = ay < 0 ? 0 : ay;
    |                 aCursor.style.top = (ay - ch) + 'px';
    |                 stop = update = true;
    |             }
    |         }
    |         stop && e.preventDefault();
    |         if (update) {
    |             let [r, g, b] = toRGB([(hh - hy) / hh, (sw - sx) / sw, (vh - vy) / vh]);
    |             // Save current state!
    |             let aTop = aCursor.style.top,
    |                 hTop = hCursor.style.top,
    |                 svRight = svCursor.style.right,
    |                 svTop = svCursor.style.top;
    |             // Update color value!
    |             picker.set(r, g, b, 1 - (ay / ah));
    |             // Restore current state!
    |             aCursor.style.top = aTop;
    |             hCursor.style.top = hTop;
    |             svCursor.style.right = svRight;
    |             svCursor.style.top = svTop;
    |             aPallete.style.backgroundImage = 'linear-gradient(rgb(' + r + ',' + g + ',' + b + '),transparent)';
    |             svPallete.style.backgroundColor = 'rgb(' + toRGB([(hh - hy) / hh, 1, 1]).join(',') + ')'; // Solid RGB
    |         }
    |     }, false);
    | }
    |
    | enableKeyboardControls(picker, 5);

block content
  main
    p: input(type='text' value='#ff0')
    ul
      li Use #[kbd Tab] or #[kbd Shift]+#[kbd Tab] key to switch between controls when color picker panel is visible.
      li Use #[kbd ArrowDown], #[kbd ArrowLeft], #[kbd ArrowRight], and #[kbd ArrowUp] key to move the current control&rsquo;s cursor.
      li Use #[kbd Escape] to hide the color picker to be able to use the #[kbd Tab] key normally.